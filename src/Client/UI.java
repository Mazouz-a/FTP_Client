/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Client;

import java.awt.Point;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;

/**
 *
 * @author Mazouz Aissa
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    static String host, user, pass;
    String chemin = "/";
    int port;

    public UI(String host, String user, String pass, int port) {
        this.host = host;
        this.user = user;
        this.pass = pass;
        this.port = port;
        initComponents();
        jScrollPane1.getColumnHeader().setVisible(false);
        txt_hostValue.setText(host);
        txt_userValue.setText(user);
        Remplir();

        TableColumnModel columnModel = FileTable.getColumnModel();
        columnModel.getColumn(0).setPreferredWidth(350);
        columnModel.getColumn(1).setPreferredWidth(70);
        columnModel.getColumn(2).setPreferredWidth(90);
        columnModel.getColumn(3).setPreferredWidth(200);

        TableColumn myCol = FileWorking.getColumnModel().getColumn(4);
        myCol.setCellRenderer(new ProgressCellRender());

        FileTable.setComponentPopupMenu(PopupMenu);
        PopupMenu.addPopupMenuListener(new PopupMenuListener() {
            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int rowAtPoint = FileTable.rowAtPoint(SwingUtilities.convertPoint(PopupMenu, new Point(0, 0), FileTable));
                        if (rowAtPoint > -1) {
                            FileTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                        }
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                // TODO Auto-generated method stub
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                // TODO Auto-generated method stub
            }
        });
    }

    public UI() {
        initComponents();
    }

    public static String getHost() {
        return host;
    }

    public static void setHost(String host) {
        UI.host = host;
    }

    public static String getUser() {
        return user;
    }

    public static void setUser(String user) {
        UI.user = user;
    }

    public static String getPass() {
        return pass;
    }

    public static void setPass(String pass) {
        UI.pass = pass;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopupMenu = new javax.swing.JPopupMenu();
        DownloadingM = new javax.swing.JMenuItem();
        RenammingM = new javax.swing.JMenuItem();
        DeletingM = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        MakingM = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        RefreshingM = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        FileTable = new javax.swing.JTable();
        Path_Label = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btn_Upload = new javax.swing.JLabel();
        btn_Download = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        File_Label = new javax.swing.JRadioButton();
        Name_Label = new javax.swing.JLabel();
        Last_Label = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        Dir_Label = new javax.swing.JRadioButton();
        Size_Label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        FileWorking = new javax.swing.JTable();
        NewFolder = new javax.swing.JLabel();
        Remove = new javax.swing.JLabel();
        Rename = new javax.swing.JLabel();
        Download = new javax.swing.JLabel();
        Refresh = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_userValue = new javax.swing.JTextField();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        txt_hostValue = new javax.swing.JTextField();
        logout_label = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        DownloadingM.setText("Download");
        DownloadingM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadingMActionPerformed(evt);
            }
        });
        PopupMenu.add(DownloadingM);

        RenammingM.setText("Rename");
        RenammingM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RenammingMActionPerformed(evt);
            }
        });
        PopupMenu.add(RenammingM);

        DeletingM.setText("Delete");
        DeletingM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletingMActionPerformed(evt);
            }
        });
        PopupMenu.add(DeletingM);
        PopupMenu.add(jSeparator1);

        MakingM.setText("Make New Folder");
        MakingM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MakingMActionPerformed(evt);
            }
        });
        PopupMenu.add(MakingM);
        PopupMenu.add(jSeparator2);

        RefreshingM.setText("Refresh");
        RefreshingM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshingMActionPerformed(evt);
            }
        });
        PopupMenu.add(RefreshingM);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(null);

        FileTable.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        FileTable.setForeground(new java.awt.Color(0, 102, 102));
        FileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Size", "Type", "Last Modified"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        FileTable.setRowHeight(25);
        FileTable.setRowMargin(5);
        FileTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FileTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(FileTable);

        Path_Label.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        Path_Label.setText("Path: /");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btn_Upload.setBackground(new java.awt.Color(255, 255, 255));
        btn_Upload.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        btn_Upload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-uploader-vers-le-ftp-48.png"))); // NOI18N
        btn_Upload.setText("UPLOAD");
        btn_Upload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_UploadMouseClicked(evt);
            }
        });

        btn_Download.setBackground(new java.awt.Color(255, 255, 255));
        btn_Download.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        btn_Download.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-download-from-ftp-48.png"))); // NOI18N
        btn_Download.setText("DOWNLOAD");
        btn_Download.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_DownloadMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(btn_Download, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                .addComponent(btn_Upload, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_Download)
                    .addComponent(btn_Upload))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel6.setText("Name:");

        File_Label.setBackground(new java.awt.Color(255, 255, 255));
        File_Label.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        File_Label.setText("File");
        File_Label.setEnabled(false);

        Name_Label.setBackground(new java.awt.Color(255, 255, 255));
        Name_Label.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        Name_Label.setText("Name");
        Name_Label.setEnabled(false);
        Name_Label.setMaximumSize(new java.awt.Dimension(300, 15));

        Last_Label.setBackground(new java.awt.Color(255, 255, 255));
        Last_Label.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        Last_Label.setText("Last");
        Last_Label.setEnabled(false);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel7.setText("Size:");

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel8.setText("Type:");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        jLabel9.setText("Last Modified:");

        Dir_Label.setBackground(new java.awt.Color(255, 255, 255));
        Dir_Label.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
        Dir_Label.setText("Directory");
        Dir_Label.setEnabled(false);

        Size_Label.setBackground(new java.awt.Color(255, 255, 255));
        Size_Label.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        Size_Label.setText("Size");
        Size_Label.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Size_Label)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(Dir_Label)
                        .addGap(18, 18, 18)
                        .addComponent(File_Label))
                    .addComponent(Last_Label)
                    .addComponent(Name_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(Last_Label)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Name_Label, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(Size_Label))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Dir_Label)
                            .addComponent(File_Label))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setBorder(null);

        jTable1.setBackground(new java.awt.Color(0, 102, 102));
        jTable1.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Welcome To FTP Client"}
            },
            new String [] {
                ""
            }
        ){public boolean isCellEditable(int row, int column){return false;}}
    );
    jTable1.setRowHeight(20);
    jScrollPane1.setViewportView(jTable1);

    jScrollPane4.setBackground(new java.awt.Color(255, 255, 255));
    jScrollPane4.setBorder(null);

    FileWorking.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
    FileWorking.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "File Name", "Size", "Path", "Process", "Status"
        }
    ) {
        boolean[] canEdit = new boolean [] {
            false, false, false, false, false
        };

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    FileWorking.setRowHeight(20);
    FileWorking.setRowMargin(5);
    jScrollPane4.setViewportView(FileWorking);

    NewFolder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-ndossier-16.png"))); // NOI18N
    NewFolder.setToolTipText("Make a new folder");
    NewFolder.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            NewFolderMouseClicked(evt);
        }
    });

    Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-effacer-16.png"))); // NOI18N
    Remove.setToolTipText("Remove");
    Remove.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            RemoveMouseClicked(evt);
        }
    });

    Rename.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-rebaptiser-16.png"))); // NOI18N
    Rename.setToolTipText("Rename");
    Rename.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            RenameMouseClicked(evt);
        }
    });

    Download.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-dossier-des-téléchargements-16.png"))); // NOI18N
    Download.setToolTipText("Download");
    Download.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            DownloadMouseClicked(evt);
        }
    });

    Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/refresh1.png"))); // NOI18N
    Refresh.setToolTipText("Refresh");
    Refresh.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            RefreshMouseClicked(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane1)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(121, 121, 121)
                    .addComponent(Path_Label)))
            .addGap(18, 18, 18)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(NewFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Rename, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Download, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(18, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(Path_Label)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(19, 19, 19)
                    .addComponent(NewFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(Rename, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(Download, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(23, Short.MAX_VALUE))
    );

    jPanel5.setBackground(new java.awt.Color(255, 255, 255));

    jLabel3.setBackground(new java.awt.Color(255, 255, 255));
    jLabel3.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
    jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/contacts_18px.png"))); // NOI18N
    jLabel3.setText("User");

    txt_userValue.setEditable(false);
    txt_userValue.setBackground(new java.awt.Color(255, 255, 255));
    txt_userValue.setForeground(new java.awt.Color(102, 102, 102));
    txt_userValue.setText("Username");
    txt_userValue.setBorder(null);
    txt_userValue.setPreferredSize(new java.awt.Dimension(45, 14));

    jSeparator5.setBackground(new java.awt.Color(41, 168, 73));
    jSeparator5.setForeground(new java.awt.Color(41, 168, 73));

    jSeparator4.setBackground(new java.awt.Color(41, 168, 73));
    jSeparator4.setForeground(new java.awt.Color(41, 168, 73));

    txt_hostValue.setEditable(false);
    txt_hostValue.setBackground(new java.awt.Color(255, 255, 255));
    txt_hostValue.setForeground(new java.awt.Color(102, 102, 102));
    txt_hostValue.setText("Localhost");
    txt_hostValue.setBorder(null);

    logout_label.setBackground(new java.awt.Color(255, 255, 255));
    logout_label.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
    logout_label.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-importer-30.png"))); // NOI18N
    logout_label.setText("Log Out");
    logout_label.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
    logout_label.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            logout_labelMouseClicked(evt);
        }
    });

    jLabel2.setBackground(new java.awt.Color(255, 255, 255));
    jLabel2.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
    jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Client/images/icons8-serveur-ftp-24.png"))); // NOI18N
    jLabel2.setText("Host");

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(logout_label, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addComponent(txt_hostValue, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(22, 22, 22)
                    .addComponent(jLabel3))
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(txt_userValue, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(84, 84, 84))
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addGap(14, 14, 14)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel2)
                .addComponent(jLabel3)
                .addComponent(txt_userValue, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txt_hostValue, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, 0)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(0, 0, Short.MAX_VALUE))
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(logout_label))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, 0))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void logout_labelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_logout_labelMouseClicked
        // TODO add your handling code here:
        Client_Logging m = new Client_Logging();
        m.setVisible(true);
        dispose();
    }//GEN-LAST:event_logout_labelMouseClicked

    private void FileTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FileTableMouseClicked
        // TODO add your handling code here:
        Name_Label.setText(FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
        Size_Label.setText(FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString());
        if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).toString().equals("File")) {
            File_Label.setSelected(true);
            Dir_Label.setSelected(false);
        } else {
            File_Label.setSelected(false);
            Dir_Label.setSelected(true);
        }
        Last_Label.setText(FileTable.getValueAt(FileTable.getSelectedRow(), 3).toString());

        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume();
            //System.out.println("Double Click");
            if (Dir_Label.isSelected()) {
                if (FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().equals("..")) {
                    if (chemin.length() != 1) {
                        chemin = chemin.substring(0, chemin.lastIndexOf('/'));
                        Path_Label.setText("Path :" + chemin);
                        Lister(chemin);
                        Cwd(chemin);
                        Name_Label.setText("");
                        Size_Label.setText("");
                        Last_Label.setText("");
                        File_Label.setSelected(false);
                        Dir_Label.setSelected(false);
                    }
                } else {
                    chemin += "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                    Path_Label.setText("Path :" + chemin);
                    Lister(chemin);
                    Cwd(chemin);
                    Name_Label.setText("");
                    Size_Label.setText("");
                    Last_Label.setText("");
                    File_Label.setSelected(false);
                    Dir_Label.setSelected(false);
                }
            }
        }
    }//GEN-LAST:event_FileTableMouseClicked

    private void btn_UploadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_UploadMouseClicked
        // TODO add your handling code here:

        if (JOptionPane.showConfirmDialog(rootPane, "You Want To Upload In : " + chemin, "UPLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            File selectedFile = null;
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            int returnValue = jfc.showOpenDialog(null);
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            jfc.setApproveButtonText("Upload");

            if (returnValue == JFileChooser.APPROVE_OPTION) {
                selectedFile = jfc.getSelectedFile();
            }
            if (selectedFile.isFile()) {
                DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
                model1.addRow(new Object[]{"CLIENT:      UPLOAD " + selectedFile.getPath()});
                jTable1.setModel(model1);
                String aa = selectedFile.getPath();
                String bb = chemin + "/" + selectedFile.getName();
                new Thread(new Runnable() {
                    @Override
                    public void run() {
                        //UploadSingleFile(aa, bb);
                        String server = getHost();
                        int port = 21;
                        String user = getUser();
                        String pass = getPass();
                        FTPClient ftpClient = new FTPClient();
                        try {
                            ftpClient.connect(server, port);
                            ftpClient.login(user, pass);
                            File LocalFile = new File(aa);
                            String RemoteFile = bb;
                            if (checkFileExists(ftpClient, bb)) {
                                JOptionPane.showMessageDialog(rootPane, "File Already Exists ");
                            } else {
                                ftpClient.enterLocalPassiveMode();
                                ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                showServerReply(ftpClient);

                                // APPROACH #1: uploads second file using an OutputStream
                                FileInputStream inputStream = new FileInputStream(LocalFile);
                                long size = LocalFile.length();

                                DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                model.addRow(new Object[]{LocalFile.getName(), LocalFile.length() / 1024 + " kb", LocalFile.getAbsolutePath(), "Uploading..."});
                                FileWorking.setModel(model);
                                int row = model.getRowCount() - 1;

                                OutputStream outputStream = ftpClient.storeFileStream(RemoteFile);
                                showServerReply(ftpClient);

                                byte[] bytesIn = new byte[Byte.MAX_VALUE];
                                int read = 0;
                                long transferé = 0;
                                int pourcentage = 0;
                                while ((read = inputStream.read(bytesIn)) != -1) {
                                    outputStream.write(bytesIn, 0, read);
                                    transferé += read;
                                    pourcentage = Math.round(transferé * 100 / size);
                                    FileWorking.setValueAt(pourcentage, row, 4);
                                }
                                inputStream.close();
                                outputStream.close();

                                boolean completed = ftpClient.completePendingCommand();
                                showServerReply(ftpClient);
                                if (completed) {
                                    System.out.println("The file is uploaded successfully.");
                                }
                            }
                            ftpClient.logout();
                            ftpClient.disconnect();
                        } catch (IOException ex) {
                            System.out.println("Oops! Something wrong happened");
                            ex.printStackTrace();
                        } finally {
                            try {
                                if (ftpClient.isConnected()) {
                                    ftpClient.logout();
                                    ftpClient.disconnect();
                                }
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                        }
                        Lister(chemin);
                    }
                }).start();
            }
        }
    }//GEN-LAST:event_btn_UploadMouseClicked

    private void btn_DownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_DownloadMouseClicked
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                if (JOptionPane.showConfirmDialog(rootPane, "You Want To Download : " + FileTable.getValueAt(FileTable.getSelectedRow(), 0),
                        "DOWNLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    File selectedFile = null;
                    JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    jfc.setSelectedFile(new File(FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString()));
                    int returnValue = jfc.showSaveDialog(null);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        selectedFile = jfc.getSelectedFile();
                    }

                    DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
                    model1.addRow(new Object[]{"CLIENT:      DOWNLOAD " + chemin + "/ " + FileTable.getValueAt(FileTable.getSelectedRow(), 0)});
                    jTable1.setModel(model1);

                    String aa = selectedFile.getParent();
                    String bb = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                    File FileExist = new File(selectedFile.getParent() + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                    System.out.println("----- >   " + FileExist.getAbsolutePath());
                    if (FileExist.exists()) {
                        if (JOptionPane.showConfirmDialog(rootPane, "File Already Exist -"
                                + FileTable.getValueAt(FileTable.getSelectedRow(), 0) + "- \n You Will Erase it?",
                                "DOWNLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            new Thread(new Runnable() {
                                @Override
                                public void run() {

                                    String server = getHost();
                                    int port = 21;
                                    String user = getUser();
                                    String pass = getPass();
                                    FTPClient ftpClient = new FTPClient();
                                    try {
                                        ftpClient.connect(server, port);
                                        ftpClient.login(user, pass);
                                        ftpClient.enterLocalPassiveMode();
                                        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                        showServerReply(ftpClient);

                                        DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                        model.addRow(new Object[]{FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString(),
                                            FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString(), "FTP", "Downloading..."});
                                        FileWorking.setModel(model);
                                        int row = model.getRowCount() - 1;

                                        // APPROACH #2: using InputStream retrieveFileStream(String)
                                        String remoteFile2 = bb;
                                        File downloadFile2 = new File(aa + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                                        OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(downloadFile2));
                                        InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
                                        showServerReply(ftpClient);
                                        byte[] bytesArray = new byte[4096];
                                        int bytesRead = -1;
                                        long transferé = 0;
                                        int pourcentage = 0;
                                        while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                                            outputStream.write(bytesArray, 0, bytesRead);
                                            transferé += bytesRead;
                                            pourcentage = (int) (transferé * 100 / (long) FileTable.getValueAt(FileTable.getSelectedRow(), 1));
                                            FileWorking.setValueAt(pourcentage, row, 4);
                                        }
                                        boolean success = ftpClient.completePendingCommand();
                                        showServerReply(ftpClient);
                                        if (success) {
                                            System.out.println("File #2 has been downloaded successfully.");
                                        }
                                        outputStream.close();
                                        inputStream.close();
                                    } catch (IOException ex) {
                                        System.out.println("Error: " + ex.getMessage());
                                        ex.printStackTrace();
                                    } finally {
                                        try {
                                            if (ftpClient.isConnected()) {
                                                ftpClient.logout();
                                                ftpClient.disconnect();
                                            }
                                        } catch (IOException ex) {
                                            ex.printStackTrace();
                                        }
                                    }
                                }
                            }).start();
                        }
                    } else {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {

                                String server = getHost();
                                int port = 21;
                                String user = getUser();
                                String pass = getPass();
                                FTPClient ftpClient = new FTPClient();
                                try {
                                    ftpClient.connect(server, port);
                                    ftpClient.login(user, pass);
                                    ftpClient.enterLocalPassiveMode();
                                    ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                    showServerReply(ftpClient);

                                    DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                    model.addRow(new Object[]{FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString(),
                                        FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString(), "FTP", "Downloading..."});
                                    FileWorking.setModel(model);
                                    int row = model.getRowCount() - 1;

                                    // APPROACH #2: using InputStream retrieveFileStream(String)
                                    String remoteFile2 = bb;
                                    File downloadFile2 = new File(aa + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                                    OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(downloadFile2));
                                    InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
                                    showServerReply(ftpClient);
                                    byte[] bytesArray = new byte[4096];
                                    int bytesRead = -1;
                                    long transferé = 0;
                                    int pourcentage = 0;
                                    while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                                        outputStream.write(bytesArray, 0, bytesRead);
                                        transferé += bytesRead;
                                        pourcentage = (int) (transferé * 100 / (long) FileTable.getValueAt(FileTable.getSelectedRow(), 1));
                                        FileWorking.setValueAt(pourcentage, row, 4);
                                    }
                                    boolean success = ftpClient.completePendingCommand();
                                    showServerReply(ftpClient);
                                    if (success) {
                                        System.out.println("File #2 has been downloaded successfully.");
                                    }
                                    outputStream.close();
                                    inputStream.close();
                                } catch (IOException ex) {
                                    System.out.println("Error: " + ex.getMessage());
                                    ex.printStackTrace();
                                } finally {
                                    try {
                                        if (ftpClient.isConnected()) {
                                            ftpClient.logout();
                                            ftpClient.disconnect();
                                        }
                                    } catch (IOException ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            }
                        }).start();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please! Select A File Not Directory ");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_btn_DownloadMouseClicked

    private void RenameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RenameMouseClicked
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            String oldName = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
            String newName;
            if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                String input = JOptionPane.showInputDialog(rootPane, "Type The New Name ",
                        FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().substring(0,
                                FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().lastIndexOf(".")));
                if (input == null) {
                    newName = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                } else {
                    newName = chemin + "/" + input + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString()
                            .substring(FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().lastIndexOf("."));
                }
            } else {
                String input = JOptionPane.showInputDialog(rootPane, "Type The New Name ",
                        FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                if (input == null) {
                    newName = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                } else {
                    newName = chemin + "/" + input;
                }
            }
            //System.out.println(oldName);
            //System.out.println(newName);
            String server = getHost();
            int port = 21;
            String user = getUser();
            String pass = getPass();

            FTPClient ftpClient = new FTPClient();
            try {
                ftpClient.connect(server, port);
                ftpClient.login(user, pass);

                boolean success = ftpClient.rename(oldName, newName);
                showServerReply(ftpClient);
                if (success) {
                    System.out.println(oldName + " was successfully renamed to: "
                            + newName);
                } else {
                    System.out.println("Failed to rename: " + oldName);
                }
                ftpClient.logout();
                ftpClient.disconnect();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                if (ftpClient.isConnected()) {
                    try {
                        ftpClient.logout();
                        ftpClient.disconnect();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
            Lister(chemin);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_RenameMouseClicked

    private void DownloadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DownloadMouseClicked
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                if (JOptionPane.showConfirmDialog(rootPane, "You Want To Download : " + FileTable.getValueAt(FileTable.getSelectedRow(), 0),
                        "DOWNLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    File selectedFile = null;
                    JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    jfc.setSelectedFile(new File(FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString()));
                    int returnValue = jfc.showSaveDialog(null);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        selectedFile = jfc.getSelectedFile();
                    }

                    DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
                    model1.addRow(new Object[]{"CLIENT:      DOWNLOAD " + chemin + "/ " + FileTable.getValueAt(FileTable.getSelectedRow(), 0)});
                    jTable1.setModel(model1);

                    String aa = selectedFile.getParent();
                    String bb = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                    File FileExist = new File(selectedFile.getParent() + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                    System.out.println("----- >   " + FileExist.getAbsolutePath());
                    if (FileExist.exists()) {
                        if (JOptionPane.showConfirmDialog(rootPane, "File Already Exist -"
                                + FileTable.getValueAt(FileTable.getSelectedRow(), 0) + "- \n You Will Erase it?",
                                "DOWNLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            new Thread(new Runnable() {
                                @Override
                                public void run() {

                                    String server = getHost();
                                    int port = 21;
                                    String user = getUser();
                                    String pass = getPass();
                                    FTPClient ftpClient = new FTPClient();
                                    try {
                                        ftpClient.connect(server, port);
                                        ftpClient.login(user, pass);
                                        ftpClient.enterLocalPassiveMode();
                                        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                        showServerReply(ftpClient);

                                        DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                        model.addRow(new Object[]{FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString(),
                                            FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString(), "FTP", "Downloading..."});
                                        FileWorking.setModel(model);
                                        int row = model.getRowCount() - 1;

                                        // APPROACH #2: using InputStream retrieveFileStream(String)
                                        String remoteFile2 = bb;
                                        File downloadFile2 = new File(aa + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                                        OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(downloadFile2));
                                        InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
                                        showServerReply(ftpClient);
                                        byte[] bytesArray = new byte[4096];
                                        int bytesRead = -1;
                                        long transferé = 0;
                                        int pourcentage = 0;
                                        while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                                            outputStream.write(bytesArray, 0, bytesRead);
                                            transferé += bytesRead;
                                            pourcentage = (int) (transferé * 100 / (long) FileTable.getValueAt(FileTable.getSelectedRow(), 1));
                                            FileWorking.setValueAt(pourcentage, row, 4);
                                        }
                                        boolean success = ftpClient.completePendingCommand();
                                        showServerReply(ftpClient);
                                        if (success) {
                                            System.out.println("File #2 has been downloaded successfully.");
                                        }
                                        outputStream.close();
                                        inputStream.close();
                                    } catch (IOException ex) {
                                        System.out.println("Error: " + ex.getMessage());
                                        ex.printStackTrace();
                                    } finally {
                                        try {
                                            if (ftpClient.isConnected()) {
                                                ftpClient.logout();
                                                ftpClient.disconnect();
                                            }
                                        } catch (IOException ex) {
                                            ex.printStackTrace();
                                        }
                                    }
                                }
                            }).start();
                        }
                    } else {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {

                                String server = getHost();
                                int port = 21;
                                String user = getUser();
                                String pass = getPass();
                                FTPClient ftpClient = new FTPClient();
                                try {
                                    ftpClient.connect(server, port);
                                    ftpClient.login(user, pass);
                                    ftpClient.enterLocalPassiveMode();
                                    ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                    showServerReply(ftpClient);

                                    DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                    model.addRow(new Object[]{FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString(),
                                        FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString(), "FTP", "Downloading..."});
                                    FileWorking.setModel(model);
                                    int row = model.getRowCount() - 1;

                                    // APPROACH #2: using InputStream retrieveFileStream(String)
                                    String remoteFile2 = bb;
                                    File downloadFile2 = new File(aa + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                                    OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(downloadFile2));
                                    InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
                                    showServerReply(ftpClient);
                                    byte[] bytesArray = new byte[4096];
                                    int bytesRead = -1;
                                    long transferé = 0;
                                    int pourcentage = 0;
                                    while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                                        outputStream.write(bytesArray, 0, bytesRead);
                                        transferé += bytesRead;
                                        pourcentage = (int) (transferé * 100 / (long) FileTable.getValueAt(FileTable.getSelectedRow(), 1));
                                        FileWorking.setValueAt(pourcentage, row, 4);
                                    }
                                    boolean success = ftpClient.completePendingCommand();
                                    showServerReply(ftpClient);
                                    if (success) {
                                        System.out.println("File #2 has been downloaded successfully.");
                                    }
                                    outputStream.close();
                                    inputStream.close();
                                } catch (IOException ex) {
                                    System.out.println("Error: " + ex.getMessage());
                                    ex.printStackTrace();
                                } finally {
                                    try {
                                        if (ftpClient.isConnected()) {
                                            ftpClient.logout();
                                            ftpClient.disconnect();
                                        }
                                    } catch (IOException ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            }
                        }).start();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please! Select A File Not Directory ");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_DownloadMouseClicked

    private void NewFolderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewFolderMouseClicked
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(rootPane, "Type The Name Of New Folder ", "NewFolder");
        if (input == null) {
            //DoNothing
        } else {
            String server = getHost();
            int port = 21;
            String user = getUser();
            String pass = getPass();
            FTPClient ftpClient = new FTPClient();
            try {
                ftpClient.connect(server, port);
                boolean success = ftpClient.login(user, pass);
                if (!success) {
                    System.out.println("Could not login to the server");
                    return;
                }
                // Creates a directory
                String dirToCreate = chemin + "/" + input;
                success = ftpClient.makeDirectory(dirToCreate);
                showServerReply(ftpClient);
                if (success) {
                    System.out.println("Successfully created directory: " + dirToCreate);
                } else {
                    System.out.println("Failed to create directory. See server's reply.");
                }
                // logs out
                ftpClient.logout();
                ftpClient.disconnect();
            } catch (IOException ex) {
                System.out.println("Oops! Something wrong happened");
                ex.printStackTrace();
            } finally {
                if (ftpClient.isConnected()) {
                    try {
                        ftpClient.logout();
                        ftpClient.disconnect();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
        Lister(chemin);
    }//GEN-LAST:event_NewFolderMouseClicked

    private void RemoveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RemoveMouseClicked
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            if (JOptionPane.showConfirmDialog(rootPane, "You Want To Delete : " + FileTable.getValueAt(FileTable.getSelectedRow(), 0),
                    "Suppression ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                    String FilePath = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0);
                    removeFile(FilePath);
                } else if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("Directory")) {
                    String DirPath = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0);
                    String server = getHost();
                    int port = 21;
                    String user = getUser();
                    String pass = getPass();
                    FTPClient ftpClient = new FTPClient();
                    try {
                        ftpClient.connect(server, port);
                        boolean success = ftpClient.login(user, pass);
                        if (!success) {
                            System.out.println("Could not login to the server");
                            return;
                        }
                        removeDirectory(ftpClient, DirPath, "");
                    } catch (IOException ex) {
                        System.out.println("Oh no, there was an error: " + ex.getMessage());
                        ex.printStackTrace();
                    } finally {
                        // logs out and disconnects from server
                        try {
                            if (ftpClient.isConnected()) {
                                ftpClient.logout();
                                ftpClient.disconnect();
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                Lister(chemin);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_RemoveMouseClicked

    private void RefreshMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshMouseClicked
        // TODO add your handling code here:
        Lister(chemin);
    }//GEN-LAST:event_RefreshMouseClicked

    private void DeletingMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletingMActionPerformed
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            if (JOptionPane.showConfirmDialog(rootPane, "You Want To Delete : " + FileTable.getValueAt(FileTable.getSelectedRow(), 0),
                    "Suppression ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {

                if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                    String FilePath = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0);
                    removeFile(FilePath);
                } else if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("Directory")) {
                    String DirPath = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0);
                    String server = getHost();
                    int port = 21;
                    String user = getUser();
                    String pass = getPass();
                    FTPClient ftpClient = new FTPClient();
                    try {
                        ftpClient.connect(server, port);
                        boolean success = ftpClient.login(user, pass);
                        if (!success) {
                            System.out.println("Could not login to the server");
                            return;
                        }

                        removeDirectory(ftpClient, DirPath, "");

                    } catch (IOException ex) {
                        System.out.println("Oh no, there was an error: " + ex.getMessage());
                        ex.printStackTrace();
                    } finally {
                        // logs out and disconnects from server
                        try {
                            if (ftpClient.isConnected()) {
                                ftpClient.logout();
                                ftpClient.disconnect();
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                Lister(chemin);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_DeletingMActionPerformed

    private void RefreshingMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshingMActionPerformed
        // TODO add your handling code here:
        Lister(chemin);
    }//GEN-LAST:event_RefreshingMActionPerformed

    private void MakingMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MakingMActionPerformed
        // TODO add your handling code here:
        String input = JOptionPane.showInputDialog(rootPane, "Type The Name Of New Folder ", "NewFolder");
        if (input == null) {
            //DoNothing
        } else {
            String server = getHost();
            int port = 21;
            String user = getUser();
            String pass = getPass();
            FTPClient ftpClient = new FTPClient();
            try {
                ftpClient.connect(server, port);
                boolean success = ftpClient.login(user, pass);
                if (!success) {
                    System.out.println("Could not login to the server");
                    return;
                }
                // Creates a directory
                String dirToCreate = chemin + "/" + input;
                success = ftpClient.makeDirectory(dirToCreate);
                showServerReply(ftpClient);
                if (success) {
                    System.out.println("Successfully created directory: " + dirToCreate);
                } else {
                    System.out.println("Failed to create directory. See server's reply.");
                }
                // logs out
                ftpClient.logout();
                ftpClient.disconnect();
            } catch (IOException ex) {
                System.out.println("Oops! Something wrong happened");
                ex.printStackTrace();
            } finally {
                if (ftpClient.isConnected()) {
                    try {
                        ftpClient.logout();
                        ftpClient.disconnect();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
        Lister(chemin);
    }//GEN-LAST:event_MakingMActionPerformed

    private void RenammingMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RenammingMActionPerformed
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            String oldName = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
            String newName;
            if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                String input = JOptionPane.showInputDialog(rootPane, "Type The New Name ",
                        FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().substring(0,
                                FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().lastIndexOf(".")));
                if (input == null) {
                    newName = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                } else {
                    newName = chemin + "/" + input + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString()
                            .substring(FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString().lastIndexOf("."));
                }
            } else {
                String input = JOptionPane.showInputDialog(rootPane, "Type The New Name ",
                        FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                if (input == null) {
                    newName = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                } else {
                    newName = chemin + "/" + input;
                }
            }
            //System.out.println(oldName);
            //System.out.println(newName);
            String server = getHost();
            int port = 21;
            String user = getUser();
            String pass = getPass();

            FTPClient ftpClient = new FTPClient();
            try {
                ftpClient.connect(server, port);
                ftpClient.login(user, pass);

                boolean success = ftpClient.rename(oldName, newName);
                showServerReply(ftpClient);
                if (success) {
                    System.out.println(oldName + " was successfully renamed to: "
                            + newName);
                } else {
                    System.out.println("Failed to rename: " + oldName);
                }
                ftpClient.logout();
                ftpClient.disconnect();
            } catch (IOException ex) {
                ex.printStackTrace();
            } finally {
                if (ftpClient.isConnected()) {
                    try {
                        ftpClient.logout();
                        ftpClient.disconnect();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
            Lister(chemin);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_RenammingMActionPerformed

    private void DownloadingMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadingMActionPerformed
        // TODO add your handling code here:
        if (FileTable.getSelectedRow() != -1) {
            if (FileTable.getValueAt(FileTable.getSelectedRow(), 2).equals("File")) {
                if (JOptionPane.showConfirmDialog(rootPane, "You Want To Download : " + FileTable.getValueAt(FileTable.getSelectedRow(), 0),
                        "DOWNLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    File selectedFile = null;
                    JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
                    jfc.setSelectedFile(new File(FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString()));
                    int returnValue = jfc.showSaveDialog(null);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        selectedFile = jfc.getSelectedFile();
                    }

                    DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
                    model1.addRow(new Object[]{"CLIENT:      DOWNLOAD " + chemin + "/ " + FileTable.getValueAt(FileTable.getSelectedRow(), 0)});
                    jTable1.setModel(model1);

                    String aa = selectedFile.getParent();
                    String bb = chemin + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString();
                    File FileExist = new File(selectedFile.getParent() + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                    System.out.println("----- >   " + FileExist.getAbsolutePath());
                    if (FileExist.exists()) {
                        if (JOptionPane.showConfirmDialog(rootPane, "File Already Exist -"
                                + FileTable.getValueAt(FileTable.getSelectedRow(), 0) + "- \n You Will Erase it?",
                                "DOWNLOADING ...", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            new Thread(new Runnable() {
                                @Override
                                public void run() {

                                    String server = getHost();
                                    int port = 21;
                                    String user = getUser();
                                    String pass = getPass();
                                    FTPClient ftpClient = new FTPClient();
                                    try {
                                        ftpClient.connect(server, port);
                                        ftpClient.login(user, pass);
                                        ftpClient.enterLocalPassiveMode();
                                        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                        showServerReply(ftpClient);

                                        DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                        model.addRow(new Object[]{FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString(),
                                            FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString(), "FTP", "Downloading..."});
                                        FileWorking.setModel(model);
                                        int row = model.getRowCount() - 1;

                                        // APPROACH #2: using InputStream retrieveFileStream(String)
                                        String remoteFile2 = bb;
                                        File downloadFile2 = new File(aa + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                                        OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(downloadFile2));
                                        InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
                                        showServerReply(ftpClient);
                                        byte[] bytesArray = new byte[4096];
                                        int bytesRead = -1;
                                        long transferé = 0;
                                        int pourcentage = 0;
                                        while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                                            outputStream.write(bytesArray, 0, bytesRead);
                                            transferé += bytesRead;
                                            pourcentage = (int) (transferé * 100 / (long) FileTable.getValueAt(FileTable.getSelectedRow(), 1));
                                            FileWorking.setValueAt(pourcentage, row, 4);
                                        }
                                        boolean success = ftpClient.completePendingCommand();
                                        showServerReply(ftpClient);
                                        if (success) {
                                            System.out.println("File #2 has been downloaded successfully.");
                                        }
                                        outputStream.close();
                                        inputStream.close();
                                    } catch (IOException ex) {
                                        System.out.println("Error: " + ex.getMessage());
                                        ex.printStackTrace();
                                    } finally {
                                        try {
                                            if (ftpClient.isConnected()) {
                                                ftpClient.logout();
                                                ftpClient.disconnect();
                                            }
                                        } catch (IOException ex) {
                                            ex.printStackTrace();
                                        }
                                    }
                                }
                            }).start();
                        }
                    } else {
                        new Thread(new Runnable() {
                            @Override
                            public void run() {

                                String server = getHost();
                                int port = 21;
                                String user = getUser();
                                String pass = getPass();
                                FTPClient ftpClient = new FTPClient();
                                try {
                                    ftpClient.connect(server, port);
                                    ftpClient.login(user, pass);
                                    ftpClient.enterLocalPassiveMode();
                                    ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
                                    showServerReply(ftpClient);

                                    DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
                                    model.addRow(new Object[]{FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString(),
                                        FileTable.getValueAt(FileTable.getSelectedRow(), 1).toString(), "FTP", "Downloading..."});
                                    FileWorking.setModel(model);
                                    int row = model.getRowCount() - 1;

                                    // APPROACH #2: using InputStream retrieveFileStream(String)
                                    String remoteFile2 = bb;
                                    File downloadFile2 = new File(aa + "/" + FileTable.getValueAt(FileTable.getSelectedRow(), 0).toString());
                                    OutputStream outputStream = new BufferedOutputStream(new FileOutputStream(downloadFile2));
                                    InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
                                    showServerReply(ftpClient);
                                    byte[] bytesArray = new byte[4096];
                                    int bytesRead = -1;
                                    long transferé = 0;
                                    int pourcentage = 0;
                                    while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                                        outputStream.write(bytesArray, 0, bytesRead);
                                        transferé += bytesRead;
                                        pourcentage = (int) (transferé * 100 / (long) FileTable.getValueAt(FileTable.getSelectedRow(), 1));
                                        FileWorking.setValueAt(pourcentage, row, 4);
                                    }
                                    boolean success = ftpClient.completePendingCommand();
                                    showServerReply(ftpClient);
                                    if (success) {
                                        System.out.println("File #2 has been downloaded successfully.");
                                    }
                                    outputStream.close();
                                    inputStream.close();
                                } catch (IOException ex) {
                                    System.out.println("Error: " + ex.getMessage());
                                    ex.printStackTrace();
                                } finally {
                                    try {
                                        if (ftpClient.isConnected()) {
                                            ftpClient.logout();
                                            ftpClient.disconnect();
                                        }
                                    } catch (IOException ex) {
                                        ex.printStackTrace();
                                    }
                                }
                            }
                        }).start();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please! Select A File Not Directory ");
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Please! Select A File From The Table ");
        }
    }//GEN-LAST:event_DownloadingMActionPerformed

    /**
     * @param args the command line arguments
     */
    private void Lister(String chemin) {
        String server = getHost();
        int port = 21;
        String user = getUser();
        String pass = getPass();
        FTPClient ftpClient = new FTPClient();

        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        model1.addRow(new Object[]{"CLIENT:      LIST " + chemin});
        jTable1.setModel(model1);

        try {
            ftpClient.connect(server, port);
            int replyCode = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(replyCode)) {
                System.out.println("Connect failed");
                return;
            }
            boolean success = ftpClient.login(user, pass);
            if (!success) {
                System.out.println("Could not login to the server");
                return;
            }
            // Lists files and directories
            FTPFile[] files1 = ftpClient.listFiles(chemin);
            showServerReply(ftpClient);
            printFileEnteredDetails(files1);
            ftpClient.logout();
            ftpClient.disconnect();
            //showServerReply(ftpClient);
            Name_Label.setText("");
            Size_Label.setText("");
            Last_Label.setText("");
            File_Label.setSelected(false);
            Dir_Label.setSelected(false);
        } catch (IOException ex) {
            System.out.println("Oops! Something wrong happened");
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void Remplir() {
        String server = getHost();
        int port = 21;
        String user = getUser();
        String pass = getPass();
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(server, port);
            showServerReply(ftpClient);
            int replyCode = ftpClient.getReplyCode();
            if (!FTPReply.isPositiveCompletion(replyCode)) {
                System.out.println("Connect failed");
                return;
            }
            boolean success = ftpClient.login(user, pass);
            showServerReply(ftpClient);
            if (!success) {
                System.out.println("Could not login to the server");
                return;
            }
            // Lists files and directories
            FTPFile[] files = ftpClient.listFiles("/");
            showServerReply(ftpClient);
            printFileDetails(files);
            ftpClient.logout();
            ftpClient.disconnect();
        } catch (IOException ex) {
            System.out.println("Oops! Something wrong happened");
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void printFileEnteredDetails(FTPFile[] files) {
        DateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        DefaultTableModel model = (DefaultTableModel) FileTable.getModel();
        model.setNumRows(0);
        model.addRow(new Object[]{"..", "", "", ""});

        for (FTPFile file : files) {
            String details = file.getName();
            if (file.isDirectory()) {
                details = "[" + details + "]";
            }
            details += "\t\t" + file.getSize();
            details += "\t\t" + dateFormater.format(file.getTimestamp().getTime());
            //System.out.println(details);
            String a = "File";
            if (file.isDirectory()) {
                a = "Directory";
            }
            model.addRow(new Object[]{file.getName(), file.getSize(), a, dateFormater.format(file.getTimestamp().getTime())});
            FileTable.setModel(model);
        }
    }

    private void printFileDetails(FTPFile[] files) {
        DateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        DefaultTableModel model = (DefaultTableModel) FileTable.getModel();

        for (FTPFile file : files) {
            String details = file.getName();
            if (file.isDirectory()) {
                details = "[" + details + "]";
            }
            details += "\t\t" + file.getSize();
            details += "\t\t" + dateFormater.format(file.getTimestamp().getTime());
            //System.out.println(details);
            String a = "File";
            if (file.isDirectory()) {
                a = "Directory";
            }
            model.addRow(new Object[]{file.getName(), file.getSize(), a, dateFormater.format(file.getTimestamp().getTime())});
            FileTable.setModel(model);
        }
    }

    private void showServerReply(FTPClient ftpClient) {
        String[] replies = ftpClient.getReplyStrings();
        if (replies != null && replies.length > 0) {
            for (String aReply : replies) {
                System.out.println("SERVER: " + aReply);
                String a = "SERVER:  " + aReply;
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.addRow(new Object[]{a});
                jTable1.setModel(model);
            }
        }
    }

    private void UploadSingleFile(String LocalFilePath, String RemoteFilePath) {
        String server = getHost();
        int port = 21;
        String user = getUser();
        String pass = getPass();
        FTPClient ftpClient = new FTPClient();
        try {

            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            showServerReply(ftpClient);

            // APPROACH #1: uploads second file using an OutputStream
            File LocalFile = new File(LocalFilePath);
            String RemoteFile = RemoteFilePath;
            FileInputStream inputStream = new FileInputStream(LocalFile);
            long size = LocalFile.length();

            DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
            model.addRow(new Object[]{LocalFile.getName(), LocalFile.length() / 1024 + " kb", LocalFile.getAbsolutePath(), "Uploading..."});
            FileWorking.setModel(model);
            int row = model.getRowCount() - 1;

            //System.out.println("Start uploading second file");
            OutputStream outputStream = ftpClient.storeFileStream(RemoteFile);
            showServerReply(ftpClient);

            byte[] bytesIn = new byte[Byte.MAX_VALUE];
            int read = 0;
            long transferé = 0;
            long pourcentage = 0;
            while ((read = inputStream.read(bytesIn)) != -1) {
                outputStream.write(bytesIn, 0, read);
                transferé += read;
                pourcentage = Math.round(transferé * 100 / size);
                FileWorking.setValueAt(pourcentage, row, 3);

            }
            inputStream.close();
            outputStream.close();

            boolean completed = ftpClient.completePendingCommand();
            showServerReply(ftpClient);

            if (completed) {
                System.out.println("The file is uploaded successfully.");
            }

            /*
            // APPROACH #2: uploads first file using an InputStream
            File firstLocalFile = new File("D:/Test/Projects.zip");

            String firstRemoteFile = "Projects.zip";
            InputStream inputStream = new FileInputStream(firstLocalFile);

            System.out.println("Start uploading first file");
            boolean done = ftpClient.storeFile(firstRemoteFile, inputStream);
            inputStream.close();
            if (done) {
                System.out.println("The first file is uploaded successfully.");
            }
             */
            ftpClient.logout();
            ftpClient.disconnect();
            //showServerReply(ftpClient);

        } catch (IOException ex) {
            System.out.println("Oops! Something wrong happened");
            ex.printStackTrace();
        } finally {
            // logs out and disconnects from server
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }

    }

    private void DownloadSingleFile(String remoteFilePath, String savePath, String Name, String size) {
        String server = getHost();
        int port = 21;
        String user = getUser();
        String pass = getPass();
        FTPClient ftpClient = new FTPClient();

        try {

            ftpClient.connect(server, port);
            ftpClient.login(user, pass);
            ftpClient.enterLocalPassiveMode();
            ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
            showServerReply(ftpClient);

            DefaultTableModel model = (DefaultTableModel) FileWorking.getModel();
            model.addRow(new Object[]{Name, size, "FTP"});
            FileWorking.setModel(model);
            int row = model.getRowCount() - 1;

            /*
            // APPROACH #1: using retrieveFile(String, OutputStream)
            String remoteFile1 = remoteFilePath;
            File downloadFile1 = new File(savePath);
            OutputStream outputStream1 = new BufferedOutputStream(new FileOutputStream(downloadFile1));
            boolean success = ftpClient.retrieveFile(remoteFile1, outputStream1);
            outputStream1.close();

            if (success) {
                System.out.println("File #1 has been downloaded successfully.");
            }
             */
            // APPROACH #2: using InputStream retrieveFileStream(String)
            String remoteFile2 = remoteFilePath;
            File downloadFile2 = new File(savePath);
            OutputStream outputStream2 = new BufferedOutputStream(new FileOutputStream(downloadFile2));
            InputStream inputStream = ftpClient.retrieveFileStream(remoteFile2);
            showServerReply(ftpClient);

            byte[] bytesArray = new byte[4096];
            int bytesRead = -1;
            while ((bytesRead = inputStream.read(bytesArray)) != -1) {
                outputStream2.write(bytesArray, 0, bytesRead);
            }

            boolean success = ftpClient.completePendingCommand();
            showServerReply(ftpClient);

            if (success) {
                System.out.println("File #2 has been downloaded successfully.");
            }
            outputStream2.close();
            inputStream.close();

        } catch (IOException ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    boolean checkDirectoryExists(FTPClient ftpClient, String dirPath) throws IOException {
        ftpClient.changeWorkingDirectory(dirPath);
        int returnCode = ftpClient.getReplyCode();
        showServerReply(ftpClient);
        if (returnCode == 550) {
            return false;
        }
        return true;
    }

    boolean checkFileExists(FTPClient ftpClient, String filePath) throws IOException {
        InputStream inputStream = ftpClient.retrieveFileStream(filePath);
        int returnCode = ftpClient.getReplyCode();
        showServerReply(ftpClient);
        if (inputStream == null || returnCode == 550) {
            return false;
        }
        return true;
    }

    private void Cwd(String dir) {
        String server = getHost();
        int port = 21;
        String user = getUser();
        String pass = getPass();
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(server, port);
            boolean success = ftpClient.login(user, pass);
            if (!success) {
                System.out.println("Could not login to the server");
                return;
            }
            // Changes working directory
            success = ftpClient.changeWorkingDirectory(dir);
            showServerReply(ftpClient);
            if (success) {
                System.out.println("Successfully changed working directory.");
            } else {
                System.out.println("Failed to change working directory. See server's reply.");
            }
            // logs out
            ftpClient.logout();
            ftpClient.disconnect();
        } catch (IOException ex) {
            System.out.println("Oops! Something wrong happened");
            ex.printStackTrace();
        } finally {
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void removeFile(String FilePath) {
        String server = getHost();
        int port = 21;
        String user = getUser();
        String pass = getPass();
        FTPClient ftpClient = new FTPClient();
        try {
            ftpClient.connect(server, port);
            boolean success = ftpClient.login(user, pass);
            if (!success) {
                System.out.println("Could not login to the server");
                return;
            }
            String fileToDelete = FilePath;
            boolean deleted = ftpClient.deleteFile(fileToDelete);
            showServerReply(ftpClient);
            if (deleted) {
                System.out.println("The file was deleted successfully.");
            } else {
                System.out.println("Could not delete the  file, it may not exist.");
            }

        } catch (IOException ex) {
            System.out.println("Oh no, there was an error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            // logs out and disconnects from server
            try {
                if (ftpClient.isConnected()) {
                    ftpClient.logout();
                    ftpClient.disconnect();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void removeDirectory(FTPClient ftpClient, String parentDir,
            String currentDir) throws IOException {
        String dirToList = parentDir;
        if (!currentDir.equals("")) {
            dirToList += "/" + currentDir;
        }

        FTPFile[] subFiles = ftpClient.listFiles(dirToList);

        if (subFiles != null && subFiles.length > 0) {
            for (FTPFile aFile : subFiles) {
                String currentFileName = aFile.getName();
                if (currentFileName.equals(".") || currentFileName.equals("..")) {
                    // skip parent directory and the directory itself
                    continue;
                }
                String filePath = parentDir + "/" + currentDir + "/"
                        + currentFileName;
                if (currentDir.equals("")) {
                    filePath = parentDir + "/" + currentFileName;
                }

                if (aFile.isDirectory()) {
                    // remove the sub directory
                    removeDirectory(ftpClient, dirToList, currentFileName);
                } else {
                    // delete the file
                    boolean deleted = ftpClient.deleteFile(filePath);
                    showServerReply(ftpClient);
                    if (deleted) {
                        System.out.println("DELETED the file: " + filePath);
                    } else {
                        System.out.println("CANNOT delete the file: "
                                + filePath);
                    }
                }
            }

            // finally, remove the directory itself
            boolean removed = ftpClient.removeDirectory(dirToList);
            showServerReply(ftpClient);
            if (removed) {
                System.out.println("REMOVED the directory: " + dirToList);
            } else {
                System.out.println("CANNOT remove the directory: " + dirToList);
            }
        } else {
            // finally, remove the directory itself
            boolean removed = ftpClient.removeDirectory(dirToList);
            showServerReply(ftpClient);
            if (removed) {
                System.out.println("REMOVED the directory: " + dirToList);
            } else {
                System.out.println("CANNOT remove the directory: " + dirToList);
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem DeletingM;
    private javax.swing.JRadioButton Dir_Label;
    private javax.swing.JLabel Download;
    private javax.swing.JMenuItem DownloadingM;
    private static javax.swing.JTable FileTable;
    private static javax.swing.JTable FileWorking;
    private javax.swing.JRadioButton File_Label;
    private javax.swing.JLabel Last_Label;
    private javax.swing.JMenuItem MakingM;
    private javax.swing.JLabel Name_Label;
    private javax.swing.JLabel NewFolder;
    private javax.swing.JLabel Path_Label;
    private javax.swing.JPopupMenu PopupMenu;
    private javax.swing.JLabel Refresh;
    private javax.swing.JMenuItem RefreshingM;
    private javax.swing.JLabel Remove;
    private javax.swing.JLabel Rename;
    private javax.swing.JMenuItem RenammingM;
    private javax.swing.JLabel Size_Label;
    private javax.swing.JLabel btn_Download;
    private javax.swing.JLabel btn_Upload;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private static javax.swing.JTable jTable1;
    private javax.swing.JLabel logout_label;
    private javax.swing.JTextField txt_hostValue;
    private javax.swing.JTextField txt_userValue;
    // End of variables declaration//GEN-END:variables
}
